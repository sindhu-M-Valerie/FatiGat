import * as React from "react";
import { createRoot } from "react-dom/client";
import * as d3 from "d3";
import { 
  SparkApp, 
  PageContainer,
  Card,
  Button,
  Input,
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  Select
} from "@github/spark/components";
import { useKV } from "@github/spark/hooks";
import { 
  Timer, 
  Coffee,
  Brain,
  ChartLine,
  Plus,
  Lightning,
  Gauge,
  Clock,
  Tag,
  FunnelSimple
} from "@phosphor-icons/react";

// Predefined project tags
const PROJECT_TAGS = [
  "Development",
  "Design",
  "Research",
  "Documentation",
  "Meeting",
  "Planning",
  "Bug Fix",
  "Feature"
];

// Helper function to calculate productivity score
const calculateProductivityScore = (project) => {
  const breakRatio = project.breaks / (project.timeSpent / 2700);
  const consistencyScore = project.sessionLengths?.reduce((acc, length) => 
    acc + (length > 1800 && length < 3600 ? 1 : 0), 0) / (project.sessionLengths?.length || 1);
  
  return Math.round((0.5 * Math.min(breakRatio, 1) + 0.5 * consistencyScore) * 100);
};

// Generate personalized suggestions based on work patterns
const generateSuggestions = (project) => {
  const suggestions = [];
  
  if (project.breaks / (project.timeSpent / 2700) < 0.8) {
    suggestions.push("Consider taking more regular breaks to maintain productivity");
  }
  
  const avgSessionLength = project.sessionLengths?.reduce((a, b) => a + b, 0) / project.sessionLengths?.length || 0;
  if (avgSessionLength > 3600) {
    suggestions.push("Your sessions are quite long. Try breaking them into smaller chunks");
  }
  
  if (project.timeSpent > 14400 && project.breaks < 4) {
    suggestions.push("Remember to take regular breaks to prevent fatigue");
  }
  
  return suggestions.length ? suggestions : ["Your work patterns look healthy! Keep it up!"];
};

// Timeline visualization component
function Timeline({ project }) {
  const svgRef = React.useRef();
  
  React.useEffect(() => {
    if (!project || !project.timeline || !svgRef.current) return;

    const width = svgRef.current.clientWidth;
    const height = 60;
    const margin = { top: 10, right: 10, bottom: 20, left: 40 };

    d3.select(svgRef.current).selectAll("*").remove();

    const svg = d3.select(svgRef.current)
      .attr("width", width)
      .attr("height", height);

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const x = d3.scaleTime()
      .domain([today, d3.timeDay.offset(today, 1)])
      .range([margin.left, width - margin.right]);

    const xAxis = d3.axisBottom(x)
      .ticks(8)
      .tickFormat(d3.timeFormat("%H:%M"));

    svg.append("g")
      .attr("transform", `translate(0,${height - margin.bottom})`)
      .call(xAxis);

    svg.selectAll("rect.work")
      .data(project.timeline.filter(t => t.type === 'work'))
      .enter()
      .append("rect")
      .attr("class", "work")
      .attr("x", d => x(new Date(d.start)))
      .attr("y", margin.top)
      .attr("width", d => x(new Date(d.end)) - x(new Date(d.start)))
      .attr("height", height - margin.top - margin.bottom)
      .attr("fill", "var(--color-accent-6)")
      .attr("opacity", 0.6);

    svg.selectAll("rect.break")
      .data(project.timeline.filter(t => t.type === 'break'))
      .enter()
      .append("rect")
      .attr("class", "break")
      .attr("x", d => x(new Date(d.start)))
      .attr("y", margin.top)
      .attr("width", d => x(new Date(d.end)) - x(new Date(d.start)))
      .attr("height", height - margin.top - margin.bottom)
      .attr("fill", "var(--color-accent-secondary-6)")
      .attr("opacity", 0.6);

  }, [project]);

  return (
    <div className="w-full">
      <svg ref={svgRef} className="w-full"></svg>
    </div>
  );
}

function App() {
  const [projects, setProjects] = useKV("fatigue-projects", []);
  const [activeProject, setActiveProject] = React.useState(null);
  const [timeSpent, setTimeSpent] = React.useState(0);
  const [breakDue, setBreakDue] = React.useState(false);
  const [sessionStart, setSessionStart] = React.useState(null);
  const [selectedTags, setSelectedTags] = React.useState([]);
  const [newProjectName, setNewProjectName] = React.useState("");
  const [newProjectTags, setNewProjectTags] = React.useState([]);

  React.useEffect(() => {
    let interval;
    if (activeProject) {
      if (!sessionStart) {
        const now = Date.now();
        setSessionStart(now);
        setProjects(prev => prev.map(p => 
          p.id === activeProject.id ? {
            ...p,
            timeline: [...(p.timeline || []), {
              type: 'work',
              start: now,
              end: now
            }]
          } : p
        ));
      }
      interval = setInterval(() => {
        setTimeSpent(prev => {
          const newTime = prev + 1;
          if (newTime % 2700 === 0) {
            setBreakDue(true);
          }
          return newTime;
        });
      }, 1000);
    } else if (sessionStart) {
      const now = Date.now();
      const sessionLength = (now - sessionStart) / 1000;
      setProjects(prev => prev.map(p => 
        p.id === activeProject?.id ? {
          ...p,
          sessionLengths: [...(p.sessionLengths || []), sessionLength],
          timeline: (p.timeline || []).map((t, i) => 
            i === p.timeline.length - 1 ? { ...t, end: now } : t
          )
        } : p
      ));
      setSessionStart(null);
    }
    return () => clearInterval(interval);
  }, [activeProject, sessionStart]);

  const addProject = () => {
    if (newProjectName.trim()) {
      setProjects(prev => [...prev, {
        id: Date.now(),
        name: newProjectName,
        tags: newProjectTags,
        timeSpent: 0,
        breaks: 0,
        sessionLengths: [],
        timeline: []
      }]);
      setNewProjectName("");
      setNewProjectTags([]);
    }
  };

  const takeBreak = (projectId) => {
    const now = Date.now();
    setProjects(prev => prev.map(p => 
      p.id === projectId ? {
        ...p,
        breaks: p.breaks + 1,
        timeline: [...(p.timeline || []), {
          type: 'break',
          start: now,
          end: now + (5 * 60 * 1000)
        }]
      } : p
    ));
    setBreakDue(false);
  };

  const filteredProjects = projects.filter(project => 
    selectedTags.length === 0 || 
    project.tags?.some(tag => selectedTags.includes(tag))
  );

  return (
    <SparkApp>
      <PageContainer maxWidth="medium">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-semibold">Fatigue Mirror</h1>
          <Dialog>
            <DialogTrigger asChild>
              <Button icon={<Plus />} variant="primary">New Project</Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Add New Project</DialogTitle>
                <DialogDescription>Start tracking a new project's time and health metrics</DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                <Input 
                  placeholder="Project name"
                  value={newProjectName}
                  onChange={e => setNewProjectName(e.target.value)}
                />
                <div>
                  <label className="text-sm font-medium mb-2 block">Project Tags</label>
                  <div className="flex flex-wrap gap-2">
                    {PROJECT_TAGS.map(tag => (
                      <Button
                        key={tag}
                        variant={newProjectTags.includes(tag) ? "primary" : "secondary"}
                        size="small"
                        onClick={() => {
                          setNewProjectTags(prev => 
                            prev.includes(tag) 
                              ? prev.filter(t => t !== tag)
                              : [...prev, tag]
                          );
                        }}
                      >
                        {tag}
                      </Button>
                    ))}
                  </div>
                </div>
                <Button 
                  variant="primary" 
                  className="w-full"
                  onClick={addProject}
                >
                  Create Project
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        <div className="mb-4">
          <div className="flex items-center gap-2 mb-2">
            <FunnelSimple className="text-accent-9" />
            <span className="font-medium">Filter by tags:</span>
          </div>
          <div className="flex flex-wrap gap-2">
            {PROJECT_TAGS.map(tag => (
              <Button
                key={tag}
                variant={selectedTags.includes(tag) ? "primary" : "secondary"}
                size="small"
                onClick={() => {
                  setSelectedTags(prev => 
                    prev.includes(tag) 
                      ? prev.filter(t => t !== tag)
                      : [...prev, tag]
                  );
                }}
              >
                {tag}
              </Button>
            ))}
          </div>
        </div>

        <div className="grid gap-4">
          {filteredProjects.map(project => (
            <Card key={project.id}>
              <div className="p-4 space-y-4">
                <div className="flex justify-between items-center">
                  <div>
                    <h3 className="text-lg font-medium">{project.name}</h3>
                    <div className="flex flex-wrap gap-2 mt-1">
                      {project.tags?.map(tag => (
                        <span 
                          key={tag}
                          className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs bg-accent-3 text-accent-11"
                        >
                          <Tag size={12} />
                          {tag}
                        </span>
                      ))}
                    </div>
                    <p className="text-fg-secondary mt-2">
                      Time: {Math.floor(project.timeSpent / 3600)}h {Math.floor((project.timeSpent % 3600) / 60)}m
                    </p>
                  </div>
                  <div className="flex gap-2">
                    <Button 
                      icon={<Timer />}
                      variant={activeProject?.id === project.id ? "primary" : "secondary"}
                      onClick={() => setActiveProject(activeProject?.id === project.id ? null : project)}
                    >
                      {activeProject?.id === project.id ? 'Stop' : 'Start'}
                    </Button>
                    <Button 
                      icon={<Coffee />} 
                      variant="plain"
                      onClick={() => takeBreak(project.id)}
                    >
                      Break
                    </Button>
                  </div>
                </div>

                <div className="flex items-center gap-4">
                  <div className="flex items-center gap-2">
                    <Gauge className="text-accent-9" />
                    <span>Productivity Score: {calculateProductivityScore(project)}%</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Coffee className="text-accent-9" />
                    <span>Breaks: {project.breaks}</span>
                  </div>
                </div>

                <div className="bg-neutral-2 p-3 rounded-md">
                  <h4 className="text-sm font-medium mb-2 flex items-center gap-2">
                    <Clock className="text-accent-9" />
                    Daily Timeline
                  </h4>
                  <Timeline project={project} />
                </div>

                <div className="bg-neutral-2 p-3 rounded-md">
                  <h4 className="text-sm font-medium mb-2 flex items-center gap-2">
                    <Lightning className="text-accent-9" />
                    Suggestions
                  </h4>
                  <ul className="text-sm space-y-1">
                    {generateSuggestions(project).map((suggestion, i) => (
                      <li key={i}>{suggestion}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </Card>
          ))}
        </div>

        <Dialog open={breakDue} onOpenChange={setBreakDue}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Time for a Break!</DialogTitle>
              <DialogDescription>
                You've been working for 45 minutes. Taking regular breaks helps maintain productivity.
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <p>Suggested activities:</p>
              <ul className="list-disc pl-6">
                <li>Take a 5-minute walk</li>
                <li>Do some quick stretches</li>
                <li>Rest your eyes by looking at something 20 feet away</li>
                <li>Get a glass of water</li>
              </ul>
            </div>
          </DialogContent>
        </Dialog>
      </PageContainer>
    </SparkApp>
  );
}

const root = createRoot(document.getElementById("root"));
root.render(<App />);
